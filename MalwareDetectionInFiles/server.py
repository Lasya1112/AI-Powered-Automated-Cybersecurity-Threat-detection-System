import os
import pickle
import requests
import pandas as pd
from fastapi import FastAPI
from pydantic import BaseModel
from sklearn.preprocessing import StandardScaler

# Google Drive file ID of the model
MODEL_URL = "https://drive.google.com/uc?export=download&id=1JHnPQhlhoJAV3msaatyH5xJHNZFMRaE7"
SCALER_URL = "https://drive.google.com/uc?export=download&id=1yKwFNcziKarLWuV1OGu_YUTHODKbRJwp"

# Download and load the model
if not os.path.exists("malware.pkl"):
    print("Downloading model...")
    r = requests.get(MODEL_URL)
    with open("malware.pkl", "wb") as f:
        f.write(r.content)

# Download and load the scaler
if not os.path.exists("scaler.pkl"):
    print("Downloading scaler...")
    r = requests.get(SCALER_URL)
    with open("scaler.pkl", "wb") as f:
        f.write(r.content)

# Load the model
with open("malware.pkl", "rb") as file:
    model = pickle.load(file)

# Load the scaler
with open("scaler.pkl", "rb") as file:
    scaler = pickle.load(file)

# FastAPI App
app = FastAPI()

class MalwareFeatures(BaseModel):
    AddressOfEntryPoint: float
    MajorLinkerVersion: float
    MajorImageVersion: float
    MajorOperatingSystemVersion: float
    DllCharacteristics: float
    SizeOfStackReserve: float
    NumberOfSections: float
    ResourceSize: float

@app.get("/")
def server_accessed():
    print("Server Accessed")
    return {"message": "Server Accessed"}
    
@app.post("/predict")
def predict(features: MalwareFeatures):
    try:
        data = pd.DataFrame([features.dict()])
        scaled_data = scaler.transform(data)
        prediction = model.predict(scaled_data)
        return {"prediction": int(prediction[0])}
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
