import time
import os
import pefile
import requests  # To call the API

downloadFolder = "~/Downloads"  # Change based on OS
apiUrl = "https://malwaredetection-0fw8.onrender.com/predict"  # Update with your API URL

# Function to extract features from PE files
def extractFeatures(filePath):
    try:
        pe = pefile.PE(filePath)

        features = {
            "AddressOfEntryPoint": pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            "MajorLinkerVersion": pe.OPTIONAL_HEADER.MajorLinkerVersion,
            "MajorImageVersion": pe.OPTIONAL_HEADER.MajorImageVersion,
            "MajorOperatingSystemVersion": pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
            "DllCharacteristics": pe.OPTIONAL_HEADER.DllCharacteristics,
            "SizeOfStackReserve": pe.OPTIONAL_HEADER.SizeOfStackReserve,
            "NumberOfSections": len(pe.sections),
            "ResourceSize": getResourceSize(pe),
        }
        return features

    except pefile.PEFormatError:
        print(f"‚úÖ {filePath} is safe.")
        return None

# Function to get resource section size
def getResourceSize(pe):
    try:
        for section in pe.sections:
            if b".rsrc" in section.Name:
                return section.SizeOfRawData
        return 0
    except:
        return 0

# Function to call the deployed ML model API
def classifyFile(filePath):
    features = extractFeatures(filePath)
    
    if features:
        response = requests.post(apiUrl, json=features)  # Send features to API
        
        if response.status_code == 200:
            prediction = response.json()["prediction"]  # Extract prediction (0 = Safe, 1 = Malware)
            return prediction
        else:
            print(f"‚ùå Error in API response: {response.text}")
            return None
    return None

# Monitor the Downloads folder
print("üîç Monitoring Downloads folder for new files...")
existingFiles = set(os.listdir(downloadFolder))

while True:
    currentFiles = set(os.listdir(downloadFolder))
    newFiles = currentFiles - existingFiles  # Find newly added files

    for newFile in newFiles:
        filePath = os.path.join(downloadFolder, newFile)
        print(f"üìÇ New file detected: {filePath}")

        # Classify the file using the deployed ML model
        malwareDetected = classifyFile(filePath)

        if malwareDetected == 1:
            print(f"‚ö† Malware detected in {newFile}!")
        elif malwareDetected == 0:
            print(f"‚úÖ {newFile} is safe.")
        else:
            print(f"‚ö† Could not process {newFile}.")

    existingFiles = currentFiles  # Update the existing file list
    time.sleep(5)  # Check every 5 seconds
